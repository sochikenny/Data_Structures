Follow-up 1: Due to latency, several hits arrive roughly at the same time and the order of timestamps is not guaranteed chronological.
Ans: 
What if the data comes in unordered and several hits carry the same timestamp.

Since the queue approach wouldn’t work without ordered data, this time go with arrays to store the hit count in each unit of time.

If we are tracking hits in the past 5 mins in seconds granularity which is 300 seconds, create 2 arrays of size 300.
int[] hits = new int[300];

TimeStamp[] times = new TimeStamp[300]; // timestamp of the last counted hit
Given an incoming, mod its timestamp by 300 to see where it locates in the hits array.

int idx = timestamp % 300; => hits[idx] keeps the hit count took place in this second

But before we increase the hit count at idx by 1, the timestamp really belongs to the second that hits[idx] is tracking.
timestamp[i] stores the timestamp of the last counted hit.
If timestamp[i] > timestamp, this hit should be discarded since it did not happened in the past 5 minute.
If timestamp[i] == timestamp, then hits[i] increase by 1.
If timestamp[i] currentTime – 300.


Follow up: Is this threadsafe?
In the simplest of terms threadsafe means that it is safe to be accessed from multiple threads. 
When you are using multiple threads in a program and they are each attempting to access a common 
data structure or location in memory several bad things can happen. So, you add some extra code to 
prevent those bad things. For example, if two people were writing the same document at the same time, 
the second person to save will overwrite the work of the first person. To make it thread safe then, 
you have to force person 2 to wait for person 1 to complete their task before allowing person 2 to edit the document.

Follow-up2: What if the number of hits per second could be very large? Does the design scale?
Ans:
